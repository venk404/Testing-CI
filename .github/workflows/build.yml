name: Build the PR

on:
  push:
    branches: [ "main" ]
    paths:
      - 'code/**'
      - 'test/**'
      - 'DB/Schemas/**'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'code/**'
      - 'test/**'
      - 'DB/Schemas/**'
    branches:
      - master
      - main
  workflow_dispatch:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual build request'

jobs:
  build:
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'
      
      - name: Cache pip packages and venv
        id: cache-dependencies
        uses: actions/cache@v3
        timeout-minutes: 5
        continue-on-error: true
        with:
          path: |
            ~/.cache/pip
            ./venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
            ${{ runner.os }}-pip-
            
      - name: Install system dependencies(Docker, make ,Docker-compose,jq)
        run: |
          chmod +x ./setup.sh
          sudo ./setup.sh
          sudo apt install -y jq

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc \
            libc6-dev \
            libpq-dev \
            libpq5
        shell: bash


      - name: Run Flake8
        run: make Code_linting

      - name: Run the application for testing
        env:
          APP_PORT: ${{ secrets.APP_PORT }}
          HOST: ${{ secrets.HOST }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        run: make all

      - name: Run tests
        run: make test
      

      - name: Get version from Git tags
        id: get_versions
        run: |
          RESTAPI_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "RESTAPI_VERSION=$RESTAPI_VERSION" >> $GITHUB_OUTPUT
        shell: bash

          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push REST API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: docker.io/${{ vars.DOCKERHUB_USERNAME }}/studentapi:${{ steps.get_versions.outputs.RESTAPI_VERSION }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.get_versions.outputs.RESTAPI_VERSION }}
          outputs: type=registry
      
      - name: Build client payload
        id: build-payload
        run: |
          payload=$(cat << 'EOF'
          {
            "restapi_version": "${{ steps.get_versions.outputs.RESTAPI_VERSION }}",
            "repository": "${{ github.repository }}",
            "images": []
          }
          EOF
          )

            payload=$(echo "$payload" | jq '.images += ["docker.io/${{ vars.DOCKERHUB_USERNAME }}/studentapi:${{ steps.get_versions.outputs.RESTAPI_VERSION }}"]')
            echo "payload=$payload"

      - name: Trigger CD workflow in another repository
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}
          repository: venk404/venk404-Implementing-Continuous-Delivery-with-ArgoCD
          event-type: update-image
          client-payload: ${{ steps.build-payload.outputs.payload }}
      
      - name: Clean up
        run: make clean